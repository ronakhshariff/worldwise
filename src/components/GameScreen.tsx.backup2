import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { MapContainer, TileLayer, Marker, useMapEvents } from 'react-leaflet';
import { Icon } from 'leaflet';
import { Clock, Target, Lock, Volume2, Shirt, MapPin, Info, User, Eye, EyeOff, Lightbulb, Sparkles, Zap, Languages } from 'lucide-react';
import { GameState, Person, Guess } from '../App';
import 'leaflet/dist/leaflet.css';

// Fix for default markers in react-leaflet
delete (Icon.Default.prototype as any)._getIconUrl;
Icon.Default.mergeOptions({
  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),
  iconUrl: require('leaflet/dist/images/marker-icon.png'),
  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),
});

interface GameScreenProps {
  gameState: GameState;
  currentPerson: Person | null;
  onSubmitGuess: (guess: Guess) => void;
}

const GameScreen: React.FC<GameScreenProps> = ({ gameState, currentPerson, onSubmitGuess }) => {
  const [selectedLocation, setSelectedLocation] = useState<{ lat: number; lng: number } | null>(null);
  const [timeLeft, setTimeLeft] = useState(gameState.timeLeft);
  const [showHints, setShowHints] = useState(false);
  const [showName, setShowName] = useState(false);
  const [showLanguage, setShowLanguage] = useState(false);

  useEffect(() => {
    const timer = setInterval(() => {
      setTimeLeft(prev => {
        if (prev <= 1) {
          // Auto-submit if time runs out
          if (selectedLocation) {
            onSubmitGuess({
              lat: selectedLocation.lat,
              lng: selectedLocation.lng,
              country: 'Unknown'
            });
          }
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, [selectedLocation, onSubmitGuess]);

  const MapClickHandler = () => {
    useMapEvents({
      click: (e) => {
        setSelectedLocation({
          lat: e.latlng.lat,
          lng: e.latlng.lng
        });
      }
    });
    return null;
  };

  const handleSubmitGuess = () => {
    if (selectedLocation) {
      onSubmitGuess({
        lat: selectedLocation.lat,
        lng: selectedLocation.lng,
        country: 'Unknown' // This would be determined by reverse geocoding
      });
    }
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  if (!currentPerson) return null;

  return (
    <div className="min-h-screen bg-gradient-to-br from-primary-50 via-white to-secondary-50 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="flex justify-between items-center mb-8"
        >
          <div className="flex items-center gap-4">
            <div className="card">
              <div className="flex items-center gap-3">
                <Clock className="w-6 h-6 text-primary-600" />
                <span className="text-2xl font-bold text-gray-800">
                  {formatTime(timeLeft)}
                </span>
              </div>
            </div>
            <div className="card">
              <div className="flex items-center gap-3">
                <Target className="w-6 h-6 text-secondary-600" />
                <span className="text-xl font-semibold text-gray-800">
                  Round {gameState.round}/{gameState.totalRounds}
                </span>
              </div>
            </div>
          </div>
          
          <div className="card">
            <div className="flex items-center gap-3">
              <div className="w-8 h-8 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-full flex items-center justify-center">
                <span className="text-white font-bold text-sm">ðŸ”¥</span>
              </div>
              <span className="text-xl font-bold text-gray-800">
                Score: {gameState.score}
              </span>
            </div>
          </div>
        </motion.div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Left: Person Photo */}
          <motion.div
            initial={{ opacity: 0, x: -30 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.2 }}
            className="lg:col-span-1"
          >
            <div className="card p-0 overflow-hidden">
              <div className="relative">
                <img
                  src={currentPerson.image}
                  alt={currentPerson.name}
                  className="w-full h-96 object-cover"
                />
                <div className="absolute top-4 right-4">
                  <button
                    onClick={() => setShowHints(!showHints)}
                    className="glass p-3 rounded-full hover:bg-white/20 transition-all duration-200"
                  >
                    <Info className="w-6 h-6 text-white" />
                  </button>
                </div>
              </div>
              
              <div className="p-6">
                {/* Beautiful Name Hint Bar */}
                <div className="mb-4">
                  <div className="bg-gradient-to-r from-gray-50 to-gray-100 rounded-xl p-4 border border-gray-200 shadow-sm">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <div className="w-10 h-10 bg-gradient-to-r from-amber-400 via-orange-500 to-pink-500 rounded-full flex items-center justify-center shadow-lg">
                          <Lightbulb className="w-5 h-5 text-white drop-shadow-sm" />
                        </div>
                        <div>
                          <h2 className="text-xl font-bold text-gray-800">
                            {showName ? currentPerson.name : 'Name Hint'}
                          </h2>
                          <p className="text-sm text-gray-600">
                            {showName ? 'Full name revealed' : 'Click to reveal name'}
                          </p>
                        </div>
                      </div>
                      
                      <button
                        onClick={() => setShowName(!showName)}
                        className="group relative p-3 rounded-xl bg-white shadow-md hover:shadow-lg transition-all duration-200 border border-gray-200 hover:border-primary-300"
                      >
                        <AnimatePresence mode="wait">
                          {showName ? (
                            <motion.div
                              key="hide"
                              initial={{ opacity: 0, scale: 0.8 }}
                              animate={{ opacity: 1, scale: 1 }}
                              exit={{ opacity: 0, scale: 0.8 }}
                              transition={{ duration: 0.2 }}
                              className="flex items-center gap-2"
                            >
                              <EyeOff className="w-5 h-5 text-gray-600 group-hover:text-primary-600 transition-colors" />
                              <span className="text-sm font-medium text-gray-600 group-hover:text-primary-600 transition-colors">
                                Hide
                              </span>
                            </motion.div>
                          ) : (
                            <motion.div
                              key="show"
                              initial={{ opacity: 0, scale: 0.8 }}
                              animate={{ opacity: 1, scale: 1 }}
                              exit={{ opacity: 0, scale: 0.8 }}
                              transition={{ duration: 0.2 }}
                              className="flex items-center gap-2"
                            >
                              <Eye className="w-5 h-5 text-gray-600 group-hover:text-primary-600 transition-colors" />
                              <span className="text-sm font-medium text-gray-600 group-hover:text-primary-600 transition-colors">
                                Show
                              </span>
                            </motion.div>
                          )}
                        </AnimatePresence>
                      </button>
                    </div>
                    
                    {/* Name Hint Content */}
                    <AnimatePresence>
                      {!showName && showHints && (
                        <motion.div
                          initial={{ opacity: 0, height: 0 }}
                          animate={{ opacity: 1, height: 'auto' }}
                          exit={{ opacity: 0, height: 0 }}
                          className="mt-4 pt-4 border-t border-gray-200"
                        >
                          <div className="flex items-center gap-3">
                            <div className="w-8 h-8 bg-gradient-to-r from-accent-400 to-accent-500 rounded-lg flex items-center justify-center shadow-md">
                              <span className="text-white font-bold text-lg">
                                {currentPerson.name.charAt(0)}
                              </span>
                            </div>
                            <div>
                              <p className="text-sm font-medium text-gray-700">
                                Name starts with "{currentPerson.name.charAt(0)}"
                              </p>
                              <p className="text-xs text-gray-500">
                                {currentPerson.name.length} letters total
                              </p>
                            </div>
                          </div>
                        </motion.div>
                      )}
                    </AnimatePresence>
                  </div>
                </div>

                {/* Beautiful Language Hint Bar */}
                <div className="mb-6">
                  <div className="bg-gradient-to-r from-gray-50 to-gray-100 rounded-xl p-4 border border-gray-200 shadow-sm">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <div className="w-10 h-10 bg-gradient-to-r from-blue-400 via-purple-500 to-indigo-500 rounded-full flex items-center justify-center shadow-lg">
                          <Languages className="w-5 h-5 text-white drop-shadow-sm" />
                        </div>
                        <div>
                          <h2 className="text-xl font-bold text-gray-800">
                            {showLanguage ? `${currentPerson.actualLocation.ethnicity} Language` : 'Language Hint'}
                          </h2>
                          <p className="text-sm text-gray-600">
                            {showLanguage ? 'Language revealed' : 'Click to reveal language'}
                          </p>
                        </div>
                      </div>
                      
                      <button
                        onClick={() => setShowLanguage(!showLanguage)}
                        className="group relative p-3 rounded-xl bg-white shadow-md hover:shadow-lg transition-all duration-200 border border-gray-200 hover:border-primary-300"
                      >
                        <AnimatePresence mode="wait">
                          {showLanguage ? (
                            <motion.div
                              key="hide"
                              initial={{ opacity: 0, scale: 0.8 }}
                              animate={{ opacity: 1, scale: 1 }}
                              exit={{ opacity: 0, scale: 0.8 }}
                              transition={{ duration: 0.2 }}
                              className="flex items-center gap-2"
                            >
                              <EyeOff className="w-5 h-5 text-gray-600 group-hover:text-primary-600 transition-colors" />
                              <span className="text-sm font-medium text-gray-600 group-hover:text-primary-600 transition-colors">
                                Hide
                              </span>
                            </motion.div>
                          ) : (
                            <motion.div
                              key="show"
                              initial={{ opacity: 0, scale: 0.8 }}
                              animate={{ opacity: 1, scale: 1 }}
                              exit={{ opacity: 0, scale: 0.8 }}
                              transition={{ duration: 0.2 }}
                              className="flex items-center gap-2"
                            >
                              <Eye className="w-5 h-5 text-gray-600 group-hover:text-primary-600 transition-colors" />
                              <span className="text-sm font-medium text-gray-600 group-hover:text-primary-600 transition-colors">
                                Show
                              </span>
                            </motion.div>
                          )}
                        </AnimatePresence>
                      </button>
                    </div>
                    
                    {/* Language Hint Content */}
                    <AnimatePresence>
                      {!showLanguage && showHints && (
                        <motion.div
                          initial={{ opacity: 0, height: 0 }}
                          animate={{ opacity: 1, height: 'auto' }}
                          exit={{ opacity: 0, height: 0 }}
                          className="mt-4 pt-4 border-t border-gray-200"
                        >
                          <div className="flex items-center gap-3">
                            <div className="w-8 h-8 bg-gradient-to-r from-blue-400 to-purple-500 rounded-lg flex items-center justify-center shadow-md">
                              <span className="text-white font-bold text-sm">
                                {currentPerson.actualLocation.ethnicity.charAt(0)}
                              </span>
                            </div>
                            <div>
                              <p className="text-sm font-medium text-gray-700">
                                Language starts with "{currentPerson.actualLocation.ethnicity.charAt(0)}"
                              </p>
                              <p className="text-xs text-gray-500">
                                {currentPerson.actualLocation.ethnicity.length} characters
                              </p>
                            </div>
                          </div>
                        </motion.div>
                      )}
                    </AnimatePresence>
                  </div>
                </div>
                
                <p className="text-gray-600 text-center">
                  Where do you think this person is from?
                </p>
              </div>
            </div>

            {/* Hints Panel */}
            <AnimatePresence>
              {showHints && currentPerson.hints && (
                <motion.div
                  initial={{ opacity: 0, height: 0 }}
                  animate={{ opacity: 1, height: 'auto' }}
                  exit={{ opacity: 0, height: 0 }}
                  className="card mt-4"
                >
                  <h3 className="text-lg font-semibold text-gray-800 mb-4">
                    Cultural Hints
                  </h3>
                  <div className="space-y-3">
                    {currentPerson.hints.voice && (
                      <div className="flex items-center gap-3">
                        <Volume2 className="w-5 h-5 text-primary-600" />
                        <span className="text-gray-700">{currentPerson.hints.voice}</span>
                      </div>
                    )}
                    {currentPerson.hints.clothing && (
                      <div className="flex items-center gap-3">
                        <Shirt className="w-5 h-5 text-secondary-600" />
                        <span className="text-gray-700">{currentPerson.hints.clothing}</span>
                      </div>
                    )}
                    {currentPerson.hints.background && (
                      <div className="flex items-center gap-3">
                        <MapPin className="w-5 h-5 text-accent-600" />
                        <span className="text-gray-700">{currentPerson.hints.background}</span>
                      </div>
                    )}
                    {currentPerson.hints.fact && (
                      <div className="flex items-center gap-3">
                        <Info className="w-5 h-5 text-green-600" />
                        <span className="text-gray-700">{currentPerson.hints.fact}</span>
                      </div>
                    )}
                  </div>
                </motion.div>
              )}
            </AnimatePresence>
          </motion.div>

          {/* Center: Interactive Map */}
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ delay: 0.4 }}
            className="lg:col-span-2"
          >
            <div className="card p-0 overflow-hidden">
              <div className="h-96 lg:h-[500px]">
                <MapContainer
                  center={[20, 0]}
                  zoom={2}
                  style={{ height: '100%', width: '100%' }}
                  className="rounded-2xl"
                >
                  <TileLayer
                    url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                    attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                  />
                  <MapClickHandler />
                  {selectedLocation && (
                    <Marker position={[selectedLocation.lat, selectedLocation.lng]} />
                  )}
                </MapContainer>
              </div>
              
              <div className="p-6">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-xl font-semibold text-gray-800">
                    Click on the map to place your guess
                  </h3>
                  {selectedLocation && (
                    <div className="text-sm text-gray-600">
                      {selectedLocation.lat.toFixed(4)}, {selectedLocation.lng.toFixed(4)}
                    </div>
                  )}
                </div>
                
                <button
                  onClick={handleSubmitGuess}
                  disabled={!selectedLocation || timeLeft === 0}
                  className={`w-full py-4 px-6 rounded-xl font-semibold text-lg transition-all duration-200 ${
                    selectedLocation && timeLeft > 0
                      ? 'bg-gradient-to-r from-primary-500 to-secondary-500 text-white shadow-lg hover:shadow-xl transform hover:scale-105'
                      : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                  }`}
                >
                  <div className="flex items-center justify-center gap-3">
                    <Lock className="w-6 h-6" />
                    Lock in Guess
                  </div>
                </button>
              </div>
            </div>
          </motion.div>
        </div>

        {/* Progress Bar */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.6 }}
          className="mt-8"
        >
          <div className="card">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-gray-600">Round Progress</span>
              <span className="text-sm font-medium text-gray-600">
                {gameState.round} of {gameState.totalRounds}
              </span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-3">
              <motion.div
                className="bg-gradient-to-r from-primary-500 to-secondary-500 h-3 rounded-full"
                initial={{ width: 0 }}
                animate={{ width: `${(gameState.round / gameState.totalRounds) * 100}%` }}
                transition={{ duration: 0.8 }}
              />
            </div>
          </div>
        </motion.div>
      </div>
    </div>
  );
};

export default GameScreen;
